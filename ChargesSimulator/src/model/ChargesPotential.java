package model;
//Author: rafdam
//Math model calculating potential and electrical force generated by stationary charges
import java.util.ArrayList;

public class ChargesPotential extends ChargesList {
	/**
	 * 
	 */
	static double electricForceX = 0; //derivative dPotential/dx
	static double electricForceY = 0; //derivative dPotential/dy
	static double electricForceZ = 0; //derivative dPotential/dz
	private static final long serialVersionUID = 1L;
	
	public double getElectricForceX(){
		return electricForceX;
	}
	
	public double getElectricForceY(){
		return electricForceY;
	}
	
	public double getElectricForceZ(){
		return electricForceZ;
	}
	
	public ChargesPotential (ArrayList<StationaryCharge> l, TestPoint w){
		
	double k = 1;
	double xMotionValue = 0; //Moved test x value by stationaryCharge x value
	double yMotionValue = 0; //Moved test y value by stationaryCharge y value
	double zMotionValue = 0; //Moved test z value by stationaryCharge z value
	double Potential = 0; //Potential generated by stationary charges in test point
	
	for (int ii=0; ii<l.size(); ii++){
		
	xMotionValue = l.get(ii).getX() + w.getTestXCord();
	yMotionValue = l.get(ii).getY() + w.getTestYCord();
	zMotionValue = l.get(ii).getZ() + w.getTestZCord();
	Potential += (k * l.get(ii).getValue()) / (Math.sqrt(Math.pow(yMotionValue,2) + Math.pow(xMotionValue,2) + Math.pow(zMotionValue,2)));
	
	}
	
	
	double deltaElectricForceX = 0; //Potential(x+ultraSmallH,y,z)
	double deltaElectricForceY = 0; //Potential(x,y+ultraSmallH,z)
	double deltaElectricForceZ = 0; //Potential(x,y,z+ultraSmallH)
	
	
	double ultraSmallH = 0.0001; //Small constant to derivative Potential
		for (int jj = 0; jj < l.size(); jj++){
			xMotionValue = -l.get(jj).getX() + w.getTestXCord();
			yMotionValue = -l.get(jj).getY() + w.getTestYCord();
			zMotionValue = -l.get(jj).getZ() + w.getTestZCord();
				
				deltaElectricForceX += (k * l.get(jj).getValue()) / (Math.sqrt(Math.pow(yMotionValue,2) + Math.pow(xMotionValue + ultraSmallH,2) + Math.pow(xMotionValue,2)));
				deltaElectricForceY += (k * l.get(jj).getValue()) / (Math.sqrt(Math.pow(yMotionValue + ultraSmallH,2) + Math.pow(xMotionValue,2) + Math.pow(yMotionValue,2)));
				deltaElectricForceZ += (k * l.get(jj).getValue()) / (Math.sqrt(Math.pow(yMotionValue,2) + Math.pow(xMotionValue,2) + Math.pow(zMotionValue + ultraSmallH,2)));
		} 
 		electricForceX=(deltaElectricForceX-Potential)/ultraSmallH;
		electricForceY=(deltaElectricForceY-Potential)/ultraSmallH;
		electricForceZ=(deltaElectricForceZ-Potential)/ultraSmallH;
	
	}
	
	
	

}
