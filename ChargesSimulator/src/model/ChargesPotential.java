package model;
import java.awt.Color;
import java.awt.Dimension;
import java.awt.Graphics;
import java.awt.Toolkit;
//Author: rafdam
//Math model calculating potential and electrical force generated by stationary charges
import java.util.ArrayList;
import java.util.Collections;


import gui.StationaryQTable;

public class ChargesPotential extends ChargesList {
	/**
	 * 
	 */
	static double electricForceX = 0; //derivative dPotential/dx
	static double electricForceY = 0; //derivative dPotential/dy
	
	double Potential = 0; //Potential generated by stationary charges in test point
	private static final long serialVersionUID = 1L;
	double k = 0;
	double xMotionValue = 0; //Moved test x value by stationaryCharge x value
	double yMotionValue = 0; //Moved test y value by stationaryCharge y value
	
	double testCordX = 0; //Coords of testPoint in potential
	double testCordY = 0;
	
	
	
	public double getElectricForceX(){
		return electricForceX;
	}
	
	public double getElectricForceY(){
		return electricForceY;
	}
	
	

	public double getPotential(){
		return Potential;
	}
	
	public double getTestX(){
		return testCordX;
	}
	
	public double getTestY(){
		return testCordY;
	}
	
	
	
	
	
	
	
	
	public ChargesPotential (ArrayList<StationaryCharge> l, TestPoint w){ //Counting Potential and electric Force in given TestPoint
		
	
	k=9*Math.pow(10, 9);
	
	testCordX = w.getTestXCord();
	testCordY = w.getTestYCord();
	
	
	
	for (int ii=0; ii<l.size(); ii++){
		
	xMotionValue = (-l.get(ii).getX() + w.getTestXCord());
	yMotionValue = (-l.get(ii).getY() + w.getTestYCord());
	
	Potential += (k * l.get(ii).getValue()) / (Math.sqrt(Math.pow(yMotionValue,2) + Math.pow(xMotionValue,2)));
	
	}
	
	
	double deltaElectricForceX = 0; //Potential(x+ultraSmallH,y,z)
	double deltaElectricForceY = 0; //Potential(x,y+ultraSmallH,z)
	
	
	
	double ultraSmallH = 0.001; //Small constant to derivative Potential
		for (int jj = 0; jj < l.size(); jj++){
			xMotionValue = -l.get(jj).getX() + w.getTestXCord();
			yMotionValue = -l.get(jj).getY() + w.getTestYCord();
			
				
				deltaElectricForceX += (k * l.get(jj).getValue()) / (Math.sqrt(Math.pow(yMotionValue,2) + Math.pow(xMotionValue + ultraSmallH,2) + Math.pow(xMotionValue,2)));
				deltaElectricForceY += (k * l.get(jj).getValue()) / (Math.sqrt(Math.pow(yMotionValue + ultraSmallH,2) + Math.pow(xMotionValue,2) + Math.pow(yMotionValue,2)));
				
		} 
 		electricForceX=(deltaElectricForceX-Potential)/ultraSmallH;
		electricForceY=(deltaElectricForceY-Potential)/ultraSmallH;

		
	
	}
		
		
	public void draw(Graphics g) {
		if(Potential<Math.pow(10,-15)){
			g.setColor(Color.DARK_GRAY);
		}
		else if(Potential<Math.pow(10, -14)&Potential>Math.pow(10, -15)){
			g.setColor(Color.gray);
		}
		else if(Potential <Math.pow(10, -13)&Potential > Math.pow(10,-14)){
			g.setColor(Color.BLUE);
		}
		else if(Potential < Math.pow(10, -12)&Potential > Math.pow(10,-13)){
			g.setColor(Color.red);
		}
		else if(Potential < Math.pow(10, -11)&Potential > Math.pow(10,-12)){
			g.setColor(Color.yellow);
		}
		else if(Potential < Math.pow(10, -10)&Potential > Math.pow(10,-11)){
			g.setColor(Color.black);
		}
		else{
			g.setColor(Color.green);
		}
		
		/*try{
		Color PotColor = new Color(100, 0, (int)(Potential/(HeatMap.getMaxValue()) * 255));
		g.setColor(PotColor);
		
		}
		catch(IllegalArgumentException e){
			g.setColor(Color.RED);
		}
		*/
		g.fillOval((int)testCordX-1, (int)testCordY-1, 2, 2);
		
	}
	
	
	/////////////////////////////////////////////////////////////////////////////////////////////////
	/*Dimension screenSize;
	double a, b;
	PotentialList heatmap;
	ArrayList<Double> potentialValue;
	double maxValue = 0;
	double changeColor = 0;
	
	
	public void HeatMap(ChargesList ChL){
		screenSize = Toolkit.getDefaultToolkit().getScreenSize();	
		double x = 0.85 * screenSize.height;
		double y =0.85 * screenSize.height;	
		
		
		
		heatmap = new PotentialList();
		potentialValue = new ArrayList<Double>();
		
		for(int kk = 0; kk < x ; kk++){
			for ( int ww = 0; ww < y ; ww++){
				TestPoint testP = new TestPoint(kk,ww,0);
				ChargesPotential ch = new ChargesPotential(ChL, testP);
				heatmap.add(ch);
				potentialValue.add(ch.getPotential());
				maxValue = Collections.max(potentialValue);
				System.out.println(maxValue);
				
			}
		}	
	}
	
	public double getMaxValue(){
		return maxValue;
	}
	
	public ArrayList<ChargesPotential> getHeatMap(){
		return heatmap;
	}
	
	public void draw(Graphics g) {
		Color PotColor = new Color(255,255,255);
		g.setColor(PotColor);
		g.fillOval( (int)testCordX, (int)testCordY, 2, 2);
		
			
		
		}
		*/
	
	
}
	
	
	


